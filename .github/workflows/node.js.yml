# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: "npm"
      - run: npm ci

      - name: create env file
        working-directory: ./
        run: |
          pwd
          touch .env
          echo MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }} >> .env
          echo MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} >> .env
          echo MYSQL_HOST=${{ secrets.MYSQL_HOST }} >> .env
          echo MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }} >> .env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
          echo SESSION_SECRET=${{ secrets.SESSION_SECRET }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo KAKAO_ID=${{ secrets.KAKAO_ID }} >> .env
          echo KAKAO_URL=${{ secrets.KAKAO_URL }} >> .env
          cat .env

      - name: zip file
        run: zip -r CI.zip ./app.js ./.env ./models ./migrations ./config ./scripts ./appspec.yml ./package.json ./package-lock.json ./passport ./middlewares ./utils ./routes ./controllers ./services ./repositories

      - name: AWS configure credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: S3 upload
        run: aws s3 cp --region ap-northeast-2 ./CI.zip s3://clone-be-bucket/deploy/

      - name: deploy with AWS codeDeploy
        run: aws deploy create-deployment
          --application-name clone-codedeploy
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name CLONE-GROUP
          --s3-location bucket=clone-be-bucket,bundleType=zip,key=deploy/CI.zip
